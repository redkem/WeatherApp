{"ast":null,"code":"import _classCallCheck from \"/Users/redonakembora/Desktop/WeatherApp/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/redonakembora/Desktop/WeatherApp/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/redonakembora/Desktop/WeatherApp/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/redonakembora/Desktop/WeatherApp/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/redonakembora/Desktop/WeatherApp/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/redonakembora/Desktop/WeatherApp/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/redonakembora/Desktop/WeatherApp/src/main.js\";\nimport React, { Component } from 'react';\nimport './index.css';\nimport clear from './images/clear.png';\nimport clouds from './images/clouds.png';\nimport rain from './images/rain.png';\nimport snow from './images/snow.png';\nimport thunderstorm from './images/thunderstorm.png';\nimport mist from './images/mist.png';\nimport snow_and_rain from './images/snow_and_rain.png'; // import Container from 'react-bootstrap/Container'\n// import Col from 'react-bootstrap/Col'\n// import Row from 'react-bootstrap/Row'\n\nvar API_KEY = \"\".concat(process.env.REACT_APP_API_KEY);\n\nvar Main =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Main, _Component);\n\n  function Main(props) {\n    var _this;\n\n    _classCallCheck(this, Main);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Main).call(this, props));\n    _this.state = {\n      isLoading: false,\n      temperature: 0,\n      cityName: null,\n      isCelsius: true,\n      main: 0,\n      countryName: null,\n      weatherCondition: null,\n      error: null\n    };\n    _this.handleClick = _this.handleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Main, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      navigator.geolocation.getCurrentPosition(function (position) {\n        _this2.fetchWeather(position.coords.latitude, position.coords.longitude);\n      }, function (error) {\n        _this2.setState({\n          error: 'Error Gettig Weather Condtions'\n        });\n      });\n    }\n  }, {\n    key: \"fetchWeather\",\n    value: function fetchWeather(lat, lon) {\n      var _this3 = this;\n\n      fetch(\"http://api.openweathermap.org/data/2.5/weather?lat=\".concat(lat, \"&lon=\").concat(lon, \"&APPID=\").concat(API_KEY, \"&units=metric\")).then(function (res) {\n        return res.json();\n      }).then(function (json) {\n        _this3.setState({\n          temperature: json.main.temp,\n          main: json.weather[0].main,\n          cityName: json.name,\n          countryName: json.sys.country,\n          weatherCondition: json.weather[0].description,\n          isLoading: true\n        });\n      });\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.setState(function (prevState) {\n        return {\n          isCelsius: !prevState.isCelsius\n        };\n      });\n\n      if (this.state.isCelsius) {\n        this.setState({\n          temperature: Math.round(this.state.temperature * (9 / 5) + 32 * 100 / 100)\n        });\n      } else {\n        this.setState({\n          temperature: Math.round((this.state.temperature - 32) * 5 / 9 * 100) / 100\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          isLoading = _this$state.isLoading,\n          weatherCondition = _this$state.weatherCondition,\n          cityName = _this$state.cityName,\n          countryName = _this$state.countryName,\n          temperature = _this$state.temperature;\n      var load = {\n        textAlign: 'center'\n      };\n      var weatherImage;\n\n      if (!isLoading) {\n        return React.createElement(\"div\", {\n          style: load,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 82\n          },\n          __self: this\n        }, \"Loading...\");\n      }\n\n      console.log(weatherCondition);\n\n      if (weatherCondition === 'clear sky') {\n        weatherImage = React.createElement(\"img\", {\n          src: clear,\n          alt: \"clear\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 88\n          },\n          __self: this\n        });\n      }\n\n      if (weatherCondition === \"few clouds\" || weatherCondition === \"scattered clouds\" || weatherCondition === \"broken clouds\") {\n        weatherImage = React.createElement(\"img\", {\n          src: clouds,\n          alt: \"clouds\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 91\n          },\n          __self: this\n        });\n      }\n\n      if (weatherCondition === 'shower rain' || weatherCondition === 'rain' || weatherCondition === 'light rain' || weatherCondition === 'light intensity drizzle' || weatherCondition === 'moderate rain') {\n        weatherImage = React.createElement(\"img\", {\n          src: rain,\n          alt: \"rain\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 95\n          },\n          __self: this\n        });\n      }\n\n      if (weatherCondition === 'thunderstorm') {\n        weatherImage = React.createElement(\"img\", {\n          src: thunderstorm,\n          alt: \"thunderstorm\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 98\n          },\n          __self: this\n        });\n      }\n\n      if (weatherCondition === 'light snow' || weatherCondition === 'snow') {\n        weatherImage = React.createElement(\"img\", {\n          src: snow,\n          alt: \"snow\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        });\n      }\n\n      if (weatherCondition === 'mist' || weatherCondition === 'fog') {\n        weatherImage = React.createElement(\"img\", {\n          src: mist,\n          alt: \"mist\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        });\n      }\n\n      if (weatherCondition === 'rain and snow') {\n        weatherImage = React.createElement(\"img\", {\n          src: snow_and_rain,\n          alt: \"snow_and_rain\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 107\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Container, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs6: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, cityName, \", \", countryName)), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(Col, {\n        xs6: \"12\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, weatherImage)));\n    }\n  }]);\n\n  return Main;\n}(Component);\n\nexport { Main as default };","map":{"version":3,"sources":["/Users/redonakembora/Desktop/WeatherApp/src/main.js"],"names":["React","Component","clear","clouds","rain","snow","thunderstorm","mist","snow_and_rain","API_KEY","process","env","REACT_APP_API_KEY","Main","props","state","isLoading","temperature","cityName","isCelsius","main","countryName","weatherCondition","error","handleClick","bind","navigator","geolocation","getCurrentPosition","position","fetchWeather","coords","latitude","longitude","setState","lat","lon","fetch","then","res","json","temp","weather","name","sys","country","description","prevState","Math","round","load","textAlign","weatherImage","console","log"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport './index.css'\nimport clear from './images/clear.png';\nimport clouds from './images/clouds.png';\nimport rain from './images/rain.png';\nimport snow from './images/snow.png';\nimport thunderstorm from './images/thunderstorm.png'\nimport mist from './images/mist.png'\nimport snow_and_rain from './images/snow_and_rain.png'\n// import Container from 'react-bootstrap/Container'\n// import Col from 'react-bootstrap/Col'\n// import Row from 'react-bootstrap/Row'\n\nconst API_KEY = `${process.env.REACT_APP_API_KEY}`;\n\nexport default class Main extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isLoading: false,\n            temperature: 0,\n            cityName: null,\n            isCelsius: true,\n            main: 0,\n            countryName: null,\n            weatherCondition: null,\n            error: null\n        }\n        this.handleClick = this.handleClick.bind(this);\n\n    }\n\n    componentDidMount() {\n        navigator.geolocation.getCurrentPosition(\n            position => {\n                this.fetchWeather(position.coords.latitude, position.coords.longitude);\n            },\n            error => {\n                this.setState({\n                    error: 'Error Gettig Weather Condtions'\n                });\n            }\n        );\n\n    }\n\n\n    fetchWeather(lat, lon) {\n        fetch(`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${API_KEY}&units=metric`)\n            .then(res => res.json())\n            .then(json => {\n                this.setState({\n                    temperature: json.main.temp,\n                    main: json.weather[0].main,\n                    cityName: json.name,\n                    countryName: json.sys.country,\n                    weatherCondition: json.weather[0].description,\n                    isLoading: true,\n                })\n\n            });\n    }\n\n    handleClick() {\n        this.setState(function (prevState) {\n            return {isCelsius: !prevState.isCelsius};\n\n        });\n        if (this.state.isCelsius) {\n            this.setState({temperature: Math.round((this.state.temperature * (9 / 5)) + 32 * 100 / 100)})\n        } else {\n            this.setState({temperature: Math.round((this.state.temperature - 32) * 5 / 9 * 100) / 100})\n        }\n    }\n\n    render() {\n        var {isLoading, weatherCondition, cityName, countryName, temperature} = this.state;\n        var load = {textAlign: 'center'};\n        let weatherImage;\n\n        if (!isLoading) {\n            return <div style={load}>Loading...</div>;\n        }\n\n        console.log(weatherCondition)\n\n        if (weatherCondition === 'clear sky') {\n            weatherImage = <img src={clear} alt=\"clear\"/>\n        }\n        if ((weatherCondition === \"few clouds\") || (weatherCondition === \"scattered clouds\") || (weatherCondition === \"broken clouds\")) {\n            weatherImage = <img src={clouds} alt=\"clouds\"/>\n        }\n        if ((weatherCondition === 'shower rain') || (weatherCondition === 'rain') || (weatherCondition === 'light rain')\n            || (weatherCondition === 'light intensity drizzle') || (weatherCondition === 'moderate rain')) {\n            weatherImage = <img src={rain} alt=\"rain\"/>\n        }\n        if (weatherCondition === 'thunderstorm') {\n            weatherImage = <img src={thunderstorm} alt=\"thunderstorm\"/>\n        }\n        if ((weatherCondition === 'light snow') || (weatherCondition === 'snow')) {\n            weatherImage = <img src={snow} alt=\"snow\"/>\n        }\n        if ((weatherCondition === 'mist') || (weatherCondition === 'fog')) {\n            weatherImage = <img src={mist} alt=\"mist\"/>\n        }\n        if (weatherCondition === 'rain and snow') {\n            weatherImage = <img src={snow_and_rain} alt=\"snow_and_rain\"/>\n        }\n\n        return (\n\n            <Container>\n                <Row>\n                    <Col xs6=\"12\">\n                        {cityName}, {countryName}\n                    </Col>\n                </Row>\n                <Row>\n                    <Col xs6=\"12\">\n                        {weatherImage}\n                    </Col>\n                </Row>\n            </Container>\n\n        );\n\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}